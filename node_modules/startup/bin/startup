#!/usr/bin/env node

/**
 * Module dependencies.
 */

var startup = require('commander')
  , resolve = require('path').resolve
  , join = require('path').join;

startup
  .version(require(join(__dirname, "../package.json")).version);

function load(args) {
  if (args.path) {
    return resolve(process.cwd(), args.path);
  }
  else {
    try {
      // Try to find it in the `package.json`
      return join(process.cwd(), require(join(process.cwd(), "package.json")).main);
    }
    catch (e) {
      // Default to `app.js`
      return join(process.cwd(), 'app');
    }
  }
};        

startup
  .command("start")
  .description("start app server")
  .option('-p, --path <path>', 'path to file')
  .option('-d, --dev', 'run in development mode', false)
  .option('-c, --cluster', 'run a cluster', false)
  .option('-P, --port <port>', 'port on which to bind', (process.env.PORT || 3000))
  .action(function(args) {
    process.env.PORT = args.port;
    require("../lib/commands/start")(load(args), args.dev, args.cluster);
  });

startup
  .command("middleware")
  .description("list middleware installed")
  .option('-p, --path <path>', 'path to file')
  .option('-d, --dev', 'run in development mode', false)
  .action(function(args) {
    require("../lib/commands/middleware")(load(args), args.dev);
  });

startup
  .command("settings")
  .description("list app settings")
  .option('-p, --path <path>', 'path to file')
  .option('-d, --dev', 'run in development mode', false)
  .action(function(args) {
    require("../lib/commands/settings")(load(args), args.dev);
  });

startup
  .command("routes")
  .description("list app routes")
  .option('-p, --path <path>', 'path to file')
  .option('-d, --dev', 'run in development mode', false)
  .action(function(args) {
    require("../lib/commands/routes")(load(args), args.dev);
  });

startup.parse(process.argv);

if (!startup.args.length) startup.help();
